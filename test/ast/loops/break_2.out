ProgramNode (1:0, 5:0)
    ForStatementNode (1:0, 5:0)
    --> test expressions:
        AssignmentExpressionNode (1:5, 1:9) { operator: = }
        --> left operand:
            IdentifierNode (1:5, 1:5) : { name: i }
        --> right operand:
            LiteralNode (1:9, 1:9) : { value: 0 }
        BinaryExpressionNode (1:12, 1:16) { operator: < }
        --> left operand:
            IdentifierNode (1:12, 1:12) : { name: i }
        --> right operand:
            LiteralNode (1:16, 1:16) : { value: 10 }
        IncrementExpression (1:20, 1:21) { type: post }
        --> identifier:
            IdentifierNode (1:20, 1:20) : { name: i }
    --> loop body:
        BlockStatementNode (1:25, 5:0)
            IfStatementNode (2:4, 4:4)
            --> test expression:
                BinaryExpressionNode (2:8, 2:14) { operator: === }
                --> left operand:
                    IdentifierNode (2:8, 2:8) : { name: i }
                --> right operand:
                    LiteralNode (2:14, 2:14) : { value: 5 }
            --> consequent:
                BlockStatementNode (2:17, 4:4)
                    BreakStatementNode (3:8, 3:13)

